#!__PYTHON_INTERPRETER__
-*- mode: python -*-

"""\
Splitter Backup System of Doom
(c) 2006 Michael D. Labriola <mdlabriola@yahoo.com>

The Splitter Backup System is designed to prepare TAR archives to be burned to
DVD media.  Currently, the maximum file size of an ISO9660 file system is
exactly 2G (2^31 bytes).  Splitter will traverse it's provided list of file
system nodes, creating TAR files no bigger than this limit.  Then you can
simply collect however many of these TAR files fit on your media (DVDs are
around 4.5G and DVD-dl are around 8.2G) into an ISO file using 'mkisofs' and
burn away.

Usage: splitter [MODE] [OPTION]...

Examples:
  splitter -r
  splitter -l
  splitter -l 1
  splitter -c 1
  splitter -c --wait=2
"""


import sys
import os
import os.path
import string
import getopt

LIBDIR = ""
sys.path.append(LIBDIR)

import config
import archive_list
import utils


def usage(message=None):
    """usage(message)
    displays the usage message along with an error (if one is provided).
    """
    if message:
        print "ERROR: %s" % (message)
    print __doc__


def process(arg):
    """process(arg)
    processes the command line opts and calls the appropriate procedure.
    """


def regen():
    utils.vprint("regen()")


def list():
    utils.vprint("list()")


def create():
    utils.vprint("create()")


def version():
    utils.vprint("version()")
    asdf


#---------------------- main --------------------------#

# parse command line args
try:
    opts, args = getopt.gnu_getopt(sys.argv[1:], 'rlcv', ['verbose', 'wait='])
    while ('--verbose', '') in opts:
        config.VERBOSE = True
        opts.remove(('--verbose', ''))
    for x in opts[:]:
        if x[0] == '--wait':
            if int(x[1]) < 0:
                raise Exception("option --wait requires positive argument")
            config.WAIT = x[1]
            opts.remove(x)
    
    utils.vprint("VERBOSE: %s" % config.VERBOSE)
    utils.vprint("WAIT: %s" % config.WAIT)
    utils.vprint("opts: %s" % opts)
    utils.vprint("args: %s" % args)
    
    if not opts:
	usage("invalid usage")
        sys.exit(1)

except Exception, e:
    usage(e)
    sys.exit(1)


# create an associative array of the command line switches and their
# corresponding procedures
function_table = { \
    '-r': regen, \
    '-l': list, \
    '-c': create, \
    '-v': version, \
    }

try:
    function_table[opts[0][0]]()
except Exception, e:
    print "ERROR: mode routine failed: %s" % e
    sys.exit(1)

#and we exit successfully
sys.exit(0)



print "splitter %s" % SPLITTER_VER

print "node_list: %s" % NODE_LIST
print "size_limit: %s (%d bytes)" % (translate_size(SIZE_LIMIT), SIZE_LIMIT)

x = archive_list(NODE_LIST, SIZE_LIMIT)
print x
