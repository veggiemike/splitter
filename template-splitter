#!__PYTHON_INTERPRETER__
#-*- mode: python -*-

"""\
Splitter Backup System
(c) 2006 Michael D Labriola <mdlabriola@yahoo.com>

The Splitter Backup System is designed to prepare TAR archives to be burned to
DVD media.  Currently, the maximum file size of an ISO9660 file system is
exactly 2G (2^31 bytes).  Splitter will traverse it's provided list of file
system nodes, creating TAR files no bigger than this limit.  Then you can
simply collect however many of these TAR files fit on your media (DVDs are
around 4.5G and DVD-dl are around 8.2G) into an ISO file using 'mkisofs' and
burn away.

Usage: splitter [OPTION]...

  --regen         Regenerate the index db stored in LIBDIR.  This will happen
                  automatically if the db is older than the configured db
                  lifespan or if the db doesn't exist yet.

  --verbose       Turns on extra debuggin output.

  --wait[=1]      Waits after the specified number of archives.  Defaults to 1.

  --list[=all]    List available archives.  Default value (all) causes a brief
                  summary listing.  Specifying an archive number will cause a
                  detailed listing to be displayed.

  --create[=all]  Create the specified archives.

Examples:
  splitter --list              # List the archives (short listing)
  splitter --list=1            # List the contents of archive #1
  splitter --create=1          # Create archive #1
  splitter --create --wait=2   # Create all archives, waiting after each 2
"""


import sys
import os
import os.path
import getopt
import cPickle

LIBDIR = "__LIBDIR__"
sys.path.append(LIBDIR)

import config
import archive_list
import utils


def usage(message=None):
    """usage(message)
    displays the usage message along with an error (if one is provided).
    """
    if message:
        print "ERROR: %s" % (message)
    print __doc__


def load_index():
    """load_index()
    loads archive_list instance from file.  if the file doesn't exists, the
    archive_list instance is created and saved to disk.  if regen is set to
    True, archive_list is reinstantiated.
    retval: archive_list
    """
    if config.REGEN or not os.path.exists(config.INDEX_FILE):
        x = archive_list.archive_list(config.NODE_LIST, config.SIZE_LIMIT)
        cPickle.dump(x, file(config.INDEX_FILE, "w"))
    else:
        x = cPickle.load(file(config.INDEX_FILE))
    return x

    
#def regen():
#    utils.vprint("regen()")
#    load_index()


def list(arg):
    utils.vprint("list()")
    alist = load_index()
    if arg == 'all':
        print alist
    else:
        print alist[int(arg) - 1].info()


def create(arg):
    utils.vprint("create()")
    alist = load_index()
    if arg == 'all':
        alist.create()
    else:
        alist[int(arg)].create()


def version():
    utils.vprint("version()")
    print "splitter version: %s" % config.VERSION


#---------------------- main --------------------------#

argv = sys.argv[1:]
print argv
# take care of -v requests and exit
if '-v' in argv:
    version()
    sys.exit(0)

# parse command line args
try:
    # fix up our "optional" arguments
    while '--wait' in argv:
        argv.remove('--wait')
        argv.append('--wait=1')
    while '--list' in argv:
        argv.remove('--list')
        argv.append('--list=all')
    while '--create' in argv:
        argv.remove('--create')
        argv.append('--create=all')
    print argv
    opts, args = getopt.gnu_getopt(argv,
                                   'v',
                                   ['verbose',
                                    'regen',
                                    'list=',
                                    'create=',
                                    'wait='])
    while ('--verbose', '') in opts:
        config.VERBOSE = True
        opts.remove(('--verbose', ''))
    while ('--regen', '') in opts:
        config.REGEN = True
        opts.remove(('--regen', ''))
    for x in opts[:]:
        if x[0] == '--wait':
            if int(x[1]) < 0:
                raise Exception("option --wait requires positive argument")
            config.WAIT = x[1]
            opts.remove(x)
    
    utils.vprint("VERBOSE: %s" % config.VERBOSE)
    utils.vprint("REGEN: %s" % config.REGEN)
    utils.vprint("WAIT: %s" % config.WAIT)
    utils.vprint("opts: %s" % opts)
    utils.vprint("args: %s" % args)
    
    if not opts:
	raise Exception("invalid usage")

except Exception, e:
    usage(e)
    sys.exit(1)


# create an associative array of the command line switches and their
# corresponding procedures
function_table = { \
    '--list': list, \
    '--create': create, \
    '-v': version, \
    }

try:
    function_table[opts[0][0]](opts[0][1])
except Exception, e:
    print "ERROR: mode routine failed: %s" % e
    sys.exit(1)

#and we exit successfully
sys.exit(0)
